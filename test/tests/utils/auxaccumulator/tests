[Tests]
  design = 'AuxAccumulator.md'
  issues = '#9'
  [test]
    type = 'Exodiff'
    input = 'auxaccumulator.i'
    exodiff = 'auxaccumulator_out.e'
    allow_test_objects = true
    requirement = 'The system shall support the accumulation of point values as if they were point sources into an auxiliary field'
  []
  [error]
    type = 'RunException'
    input = 'auxaccumulator.i'
    cli_args = 'Outputs/exodus=false UserObjects/auxaccumulator/skip_finalize=True'
    expect_err = 'AccumulatorBase was not finalized'
    allow_test_objects = true
    requirement = 'The system shall report a reasonable error when accumulating point values into an auxiliary field when the system is not properly finalized'
  []
  [charge_mapping]
    type = 'Exodiff'
    input = 'charge_accumulator.i'
    exodiff = 'charge_accumulator_out.e'
    allow_test_objects = true
    requirement = 'The system shall support mapping data from rays to an aux variable and reset the aux variable to 0 on each time step'
  []
  [charge_mapping2D]
    type = 'Exodiff'
    input = 'charge_accumulator2D.i'
    exodiff = 'charge_accumulator2D_out.e'
    allow_test_objects = true
    requirement = 'The system shall support mapping data from rays to an aux variable and reset the aux variable to 0 on each time step on a 2 dimensional mesh'
  []
  [simple_potential_solve_aux]
    type = 'Exodiff'
    input = 'simple_potential_solve_aux.i'
    exodiff = 'simple_potential_solve_aux_out.e'
    allow_test_objects = true
    requirement = 'The system shall support mapping data from rays to an aux variable and then solve differential equations based on the data mapped from rays'
  []
[]
